#!/bin/sh
####    initialize ####
# path of test data
cd
path=${1:-~/test_data}
# file to execute
submission=${2:-~/run.in}
# echo Path $path Sub $submission
# Limits in
## ms
time_limit=${3:-2000}
## kB
memory_limit=${4:-256000}
## sec
time_out_value=${5:-$((time_limit / 1000)).5}
####               ####
accnt=0
tlecnt=0
recnt=0
mlecnt=0
RED='\033[1;31m'
GREEN='\033[1;32m'
YEL='\033[1;33m'
BLUE='\033[1;34m'
DEF='\033[0m'
numregex='^[0-9]+$'
testcnt=0
total_time=0
ulimit -S -s $memory_limit -v $(($memory_limit*4))
# cnt normal
printf "\nResult ------------------------------\n"
echo ""
# Run testcases
for (( i = 1; ; ++i))
do
	if [ ! -f $path/$i.in ]; then
		break;
	fi
	((++testcnt))
	printf "${DEF}Test Data %3d ---------- " $i
	start_t=$(date +%s%N)
	MEM=$(/usr/bin/time -q -f "%M" bash -c "(timeout --preserve-status --foreground $time_out_value $submission<$path/$i.in>$path/tmp.out)2>/dev/null" 2>&1)
	ERR=$?
	end_t=$(date +%s%N)
	if ! [[ $MEM =~ $numregex ]]; then
		MEM=-1
		ERR=1
	fi
	time_elapsed=$((($end_t - $start_t) / 1000000))
	verdict=$(diff "$path/tmp.out" "$path/$i.out")
	rm "$path/tmp.out"
	if (($ERR != 0 && $ERR != 143))
	then 
		echo -e "${YEL}RE \c"
		((++recnt))
	elif (($MEM > $memory_limit))
	then
		echo -e "${YEL}MLE \c"
		((++mlecnt))
	elif [ $time_elapsed -gt $time_limit ]
	then
		echo -e "${BLUE}TLE\c"
		((++tlecnt))
	else
		if [ "$verdict" != "" ]
		then
			echo -e "${RED}WA \c"
		else
			echo -e "${GREEN}AC \c"
			((++accnt))
		fi
	fi
	printf "%6d ms %8d KB\n" $time_elapsed $MEM
	((total_time += time_elapsed))
done
# Get the verdicts
echo ""
if [ $accnt == $testcnt ]
then
	echo -e "${GREEN}AC $accnt / $testcnt\c"
elif [ $recnt != 0 ]
then
	echo -e "${YEL}RE ${GREEN}$accnt${YEL} / $testcnt\c"
elif [ $tlecnt != 0 ]
then
	echo -e "${BLUE}TLE ${GREEN}$accnt${BLUE} / $testcnt\c"
elif [ $mlecnt != 0 ]
then
	echo -e "${YEL}MLE ${GREEN}$accnt${YEL} / $testcnt\c"
else
	echo -e "${RED}WA  ${GREEN}$accnt${RED} / $testcnt\c"
fi
printf "   Total Run Time : %8d ms$DEF\n\n" $total_time
exit $(($accnt * 100 / $testcnt))
